// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/com/intellij/dts/lang/lexer/dts.flex

package com.intellij.dts.lang.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import com.intellij.dts.lang.psi.DtsTypes;


class DtsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_CELL = 2;
  public static final int WAITING_BYTE = 4;
  public static final int WAITING_VALUE = 6;
  public static final int WAITING_BITS = 8;
  public static final int WAITING_EXPR = 10;
  public static final int WAITING_HANDLE = 12;
  public static final int WAITING_INCLUDE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\21\6\36\5\37\1\40\10\37\1\41\2\37"+
    "\1\42\2\37\1\43\1\44\1\45\1\46\1\37\1\0"+
    "\1\36\1\47\1\50\1\51\1\52\1\53\1\54\1\37"+
    "\1\55\2\37\1\56\1\57\1\60\1\61\1\62\1\37"+
    "\1\63\1\64\1\65\1\66\1\67\1\37\1\70\1\71"+
    "\1\37\1\72\1\73\1\74\1\75\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\1\22\2\1\2\23\1\24"+
    "\1\4\1\1\1\4\1\25\1\26\1\1\2\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\26\1\37"+
    "\1\40\2\23\1\41\1\42\1\1\1\43\1\44\1\4"+
    "\1\45\1\46\1\47\3\50\1\51\1\52\1\53\1\54"+
    "\1\3\1\0\1\55\4\4\1\0\1\56\13\0\3\21"+
    "\2\23\1\0\2\57\4\0\2\27\1\0\1\60\1\61"+
    "\2\23\1\0\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\7\51\1\54\3\4\1\70\2\4\15\0\1\21\1\0"+
    "\2\23\5\0\2\27\2\23\11\51\4\4\1\70\2\4"+
    "\1\71\15\0\2\21\6\0\1\71\6\51\1\4\1\70"+
    "\1\4\13\0\6\51\1\4\1\72\10\0\6\51\6\0"+
    "\6\51\1\0\1\73\3\0\1\74\1\51\1\73\3\51"+
    "\1\74\2\0\1\75\2\0\2\51\1\75\2\51\4\0"+
    "\4\51\4\0\4\51\2\0\1\76\1\0\2\51\1\76"+
    "\1\51\1\77\2\0\1\77\2\51\2\0\2\51\2\0"+
    "\2\51\1\0\1\100\1\51\1\100\2\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u01f0\0\u01f0\0\u01f0\0\u02e8"+
    "\0\u0326\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u0364\0\u03a2\0\u01f0\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u01f0\0\u04d8\0\u0516\0\u0554\0\u01f0\0\u03e0\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u01f0\0\u068a\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u041e\0\u06c8\0\u0706\0\u01f0\0\u0744\0\u0782"+
    "\0\u07c0\0\u01f0\0\u07fe\0\u01f0\0\u083c\0\u01f0\0\u01f0\0\u022e"+
    "\0\u0592\0\u087a\0\u08b8\0\u01f0\0\u08f6\0\u01f0\0\u0592\0\u01f0"+
    "\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u03e0\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u01f0\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u03e0"+
    "\0\u04d8\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u01f0\0\u01f0\0\u0ffc\0\u103a\0\u1078\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u01f0\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u03e0\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u01f0"+
    "\0\u18f2\0\u01f0\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u01f0\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u196e\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u01f0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u01f0\0\u2f78\0\u2fb6\0\u2ff4\0\u01f0\0\u3032\0\u196e"+
    "\0\u3070\0\u30ae\0\u30ec\0\u196e\0\u312a\0\u3168\0\u01f0\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u196e\0\u329e\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u01f0\0\u3776\0\u37b4\0\u37f2\0\u196e\0\u3830\0\u01f0\0\u386e"+
    "\0\u38ac\0\u196e\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u01f0\0\u3b94\0\u196e"+
    "\0\u01f0\0\u196e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\11\1\12\1\11\1\13\1\14\1\11"+
    "\1\15\1\11\1\16\1\17\5\20\1\21\5\20\1\11"+
    "\1\22\1\23\1\24\1\25\6\20\1\26\1\11\1\27"+
    "\1\11\23\20\1\30\1\11\1\31\2\11\2\12\1\11"+
    "\1\12\2\11\1\32\1\11\1\15\1\33\1\34\1\11"+
    "\5\35\1\36\1\37\4\40\4\11\1\41\1\35\5\42"+
    "\4\11\23\42\5\11\2\12\1\11\1\12\2\11\1\32"+
    "\5\11\5\35\1\36\5\43\5\11\1\35\1\44\4\42"+
    "\2\11\1\45\1\11\5\44\16\42\5\11\2\12\1\11"+
    "\1\12\1\11\1\13\1\32\1\11\1\15\1\11\1\16"+
    "\1\17\2\35\1\46\2\35\1\21\5\35\2\11\1\23"+
    "\1\11\1\25\1\35\5\42\1\26\1\11\1\27\1\11"+
    "\23\42\1\30\1\11\1\31\2\11\2\12\1\11\1\12"+
    "\2\11\1\47\12\11\1\36\1\50\4\51\47\11\2\12"+
    "\1\11\1\12\1\52\1\11\1\47\1\53\1\54\1\33"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\11\1\63"+
    "\1\64\4\65\1\66\1\11\1\67\1\70\1\71\1\72"+
    "\5\73\3\11\1\74\23\73\1\11\1\75\1\11\1\76"+
    "\1\77\1\12\1\100\1\77\1\100\2\77\1\101\12\77"+
    "\1\102\13\77\5\103\4\77\23\103\1\30\1\77\1\104"+
    "\1\77\1\11\2\12\1\11\1\12\1\11\1\105\1\47"+
    "\12\11\1\36\53\11\77\0\2\12\1\0\1\12\71\0"+
    "\6\13\1\106\67\13\1\0\1\107\5\0\1\20\5\0"+
    "\5\20\1\0\5\20\1\110\4\0\6\20\4\0\2\20"+
    "\1\111\1\112\2\20\1\113\10\20\1\114\3\20\13\0"+
    "\1\20\5\0\5\20\1\0\5\20\1\110\4\0\6\20"+
    "\4\0\23\20\21\0\1\115\4\0\1\116\24\0\1\117"+
    "\1\0\1\120\3\0\1\121\1\0\1\122\1\0\1\123"+
    "\1\124\14\0\1\107\5\0\1\125\5\0\5\125\1\0"+
    "\5\125\1\110\4\0\6\125\4\0\2\125\1\126\1\127"+
    "\2\125\1\130\10\125\1\131\3\125\4\0\12\132\1\133"+
    "\31\132\1\134\31\132\7\0\1\125\5\0\5\125\1\0"+
    "\5\125\1\110\4\0\6\125\4\0\23\125\21\0\1\115"+
    "\4\0\1\116\26\0\1\120\3\0\1\121\1\0\1\122"+
    "\1\0\1\123\1\124\22\0\1\125\5\0\5\125\1\0"+
    "\5\40\1\110\4\0\3\125\1\135\1\136\1\137\4\0"+
    "\21\125\1\137\1\125\13\0\1\125\5\0\5\125\1\0"+
    "\5\40\1\110\4\0\3\125\1\135\1\136\1\125\4\0"+
    "\23\125\13\0\1\125\5\0\5\125\1\0\5\42\1\110"+
    "\4\0\1\125\5\42\4\0\23\42\13\0\1\125\5\0"+
    "\5\125\1\0\5\140\1\110\4\0\1\125\1\140\4\125"+
    "\4\0\5\140\16\125\13\0\1\125\5\0\5\125\1\0"+
    "\5\141\1\110\4\0\1\125\1\141\4\42\4\0\5\141"+
    "\16\42\5\0\1\107\47\0\1\142\1\143\2\0\1\144"+
    "\10\0\1\145\32\0\5\51\10\0\1\146\1\147\1\150"+
    "\25\0\1\150\30\0\5\51\10\0\1\146\1\147\67\0"+
    "\1\151\53\0\1\152\107\0\5\65\10\0\1\153\1\154"+
    "\1\155\25\0\1\155\30\0\5\65\10\0\1\153\1\154"+
    "\66\0\1\156\1\157\75\0\1\160\75\0\1\161\1\162"+
    "\64\0\5\73\6\0\5\73\4\0\23\73\77\0\1\163"+
    "\11\0\1\164\5\0\1\165\4\164\1\116\5\164\5\0"+
    "\6\164\4\0\2\164\1\166\3\164\1\167\1\164\1\170"+
    "\1\164\1\171\1\172\7\164\27\0\5\103\6\0\5\103"+
    "\4\0\23\103\4\0\2\105\1\0\3\105\1\173\67\105"+
    "\7\0\1\20\5\0\5\20\1\0\5\20\1\110\4\0"+
    "\6\20\4\0\3\20\1\174\17\20\13\0\1\20\5\0"+
    "\5\20\1\0\5\20\1\110\4\0\6\20\4\0\7\20"+
    "\1\175\1\20\1\176\11\20\13\0\1\20\5\0\5\20"+
    "\1\0\5\20\1\110\4\0\6\20\4\0\4\20\1\177"+
    "\4\20\1\200\11\20\13\0\1\20\5\0\5\20\1\0"+
    "\5\20\1\110\4\0\6\20\4\0\11\20\1\201\11\20"+
    "\4\0\15\115\1\202\60\115\2\116\1\0\1\116\1\0"+
    "\71\116\55\0\1\203\72\0\1\204\12\0\1\205\70\0"+
    "\1\206\67\0\1\207\102\0\1\210\74\0\1\211\26\0"+
    "\1\125\5\0\5\125\1\0\5\125\1\110\4\0\6\125"+
    "\4\0\3\125\1\212\17\125\13\0\1\125\5\0\5\125"+
    "\1\0\5\125\1\110\4\0\6\125\4\0\7\125\1\213"+
    "\1\125\1\214\11\125\13\0\1\125\5\0\5\125\1\0"+
    "\5\125\1\110\4\0\6\125\4\0\4\125\1\177\4\125"+
    "\1\215\11\125\13\0\1\125\5\0\5\125\1\0\5\125"+
    "\1\110\4\0\6\125\4\0\11\125\1\216\11\125\16\0"+
    "\1\133\63\0\23\132\3\217\42\132\1\220\5\132\7\0"+
    "\1\125\5\0\5\125\1\0\5\125\1\110\4\0\3\125"+
    "\1\221\2\125\4\0\23\125\13\0\1\125\5\0\5\125"+
    "\1\0\5\125\1\110\4\0\3\125\1\135\2\125\4\0"+
    "\23\125\13\0\1\125\5\0\5\125\1\0\5\222\1\110"+
    "\4\0\1\125\1\222\4\125\4\0\5\222\16\125\56\0"+
    "\1\223\101\0\1\224\1\0\1\225\70\0\1\177\4\0"+
    "\1\226\75\0\1\227\55\0\1\230\75\0\1\146\60\0"+
    "\5\231\6\0\1\231\10\0\5\231\62\0\1\232\75\0"+
    "\1\153\60\0\5\233\6\0\1\233\10\0\5\233\31\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\23\164\4\0\7\115\1\165\5\115\1\235\4\165\1\236"+
    "\5\165\5\115\6\165\4\115\23\165\4\115\7\0\1\164"+
    "\5\0\5\164\1\234\5\164\5\0\6\164\4\0\3\164"+
    "\1\237\12\164\1\240\4\164\13\0\1\164\5\0\5\164"+
    "\1\234\5\164\5\0\6\164\4\0\11\164\1\241\11\164"+
    "\13\0\1\164\5\0\5\164\1\234\5\164\5\0\6\164"+
    "\4\0\3\164\1\242\17\164\13\0\1\164\5\0\5\164"+
    "\1\234\5\164\5\0\6\164\4\0\10\164\1\243\12\164"+
    "\13\0\1\164\5\0\5\164\1\234\5\164\5\0\6\164"+
    "\4\0\7\164\1\244\13\164\13\0\1\20\5\0\5\20"+
    "\1\0\5\20\1\110\4\0\6\20\4\0\4\20\1\245"+
    "\16\20\13\0\1\20\5\0\5\20\1\0\5\20\1\110"+
    "\4\0\6\20\4\0\6\20\1\246\6\20\1\247\5\20"+
    "\13\0\1\20\5\0\5\20\1\0\5\20\1\110\4\0"+
    "\6\20\4\0\2\20\1\250\20\20\4\0\2\177\3\0"+
    "\37\177\1\251\31\177\7\0\1\20\5\0\5\20\1\0"+
    "\5\20\1\110\4\0\6\20\4\0\1\20\1\252\21\20"+
    "\13\0\1\20\5\0\5\20\1\0\5\20\1\110\4\0"+
    "\6\20\4\0\2\20\1\253\20\20\4\0\22\115\1\254"+
    "\53\115\65\0\1\255\66\0\1\256\103\0\1\257\61\0"+
    "\1\260\104\0\1\261\73\0\1\262\106\0\1\263\16\0"+
    "\1\125\5\0\5\125\1\0\5\125\1\110\4\0\6\125"+
    "\4\0\4\125\1\264\16\125\13\0\1\125\5\0\5\125"+
    "\1\0\5\125\1\110\4\0\6\125\4\0\6\125\1\265"+
    "\6\125\1\266\5\125\13\0\1\125\5\0\5\125\1\0"+
    "\5\125\1\110\4\0\6\125\4\0\2\125\1\267\20\125"+
    "\13\0\1\125\5\0\5\125\1\0\5\125\1\110\4\0"+
    "\6\125\4\0\1\125\1\270\21\125\13\0\1\125\5\0"+
    "\5\125\1\0\5\125\1\110\4\0\6\125\4\0\2\125"+
    "\1\271\20\125\16\0\1\133\10\0\4\272\72\0\5\273"+
    "\6\0\1\273\10\0\5\273\31\0\1\125\5\0\5\125"+
    "\1\0\5\222\1\110\4\0\1\125\1\222\1\125\1\135"+
    "\1\136\1\125\4\0\5\222\16\125\57\0\1\274\77\0"+
    "\1\275\6\0\1\276\62\0\1\277\74\0\1\300\76\0"+
    "\1\301\47\0\5\231\6\0\1\231\1\0\1\146\1\147"+
    "\5\0\5\231\45\0\5\233\6\0\1\233\1\0\1\153"+
    "\1\154\5\0\5\233\31\0\1\164\5\0\5\164\1\0"+
    "\5\164\5\0\6\164\4\0\23\164\4\0\7\115\1\165"+
    "\5\115\5\165\1\302\5\165\5\115\6\165\4\115\23\165"+
    "\13\115\1\165\5\115\1\235\4\165\1\115\5\165\5\115"+
    "\6\165\4\115\23\165\4\115\7\0\1\164\5\0\5\164"+
    "\1\234\5\164\5\0\6\164\4\0\7\164\1\303\13\164"+
    "\13\0\1\164\5\0\5\164\1\234\5\164\5\0\6\164"+
    "\4\0\15\164\1\304\5\164\13\0\1\164\5\0\5\164"+
    "\1\234\5\164\5\0\6\164\4\0\1\164\1\305\21\164"+
    "\13\0\1\164\5\0\5\164\1\234\5\164\5\0\6\164"+
    "\4\0\10\164\1\306\12\164\13\0\1\164\5\0\5\164"+
    "\1\234\5\164\5\0\6\164\4\0\6\164\1\307\14\164"+
    "\13\0\1\164\5\0\5\164\1\234\5\164\5\0\6\164"+
    "\4\0\17\164\1\310\3\164\13\0\1\20\5\0\5\20"+
    "\1\0\5\20\1\110\4\0\6\20\4\0\6\20\1\311"+
    "\14\20\13\0\1\20\5\0\5\20\1\0\5\20\1\110"+
    "\4\0\6\20\4\0\4\20\1\177\16\20\13\0\1\20"+
    "\5\0\5\20\1\0\5\20\1\110\4\0\6\20\4\0"+
    "\3\20\1\177\17\20\13\0\1\20\5\0\5\20\1\0"+
    "\5\20\1\110\4\0\6\20\4\0\6\20\1\246\14\20"+
    "\4\0\1\177\1\251\1\177\1\0\1\312\37\177\1\251"+
    "\31\177\7\0\1\20\5\0\5\20\1\0\5\20\1\110"+
    "\4\0\6\20\4\0\7\20\1\313\13\20\13\0\1\20"+
    "\5\0\5\20\1\0\5\20\1\110\4\0\6\20\4\0"+
    "\3\20\1\246\17\20\70\0\1\314\63\0\1\315\43\0"+
    "\1\316\133\0\1\317\102\0\1\320\77\0\1\321\64\0"+
    "\1\322\30\0\1\125\5\0\5\125\1\0\5\125\1\110"+
    "\4\0\6\125\4\0\6\125\1\323\14\125\13\0\1\125"+
    "\5\0\5\125\1\0\5\125\1\110\4\0\6\125\4\0"+
    "\4\125\1\177\16\125\13\0\1\125\5\0\5\125\1\0"+
    "\5\125\1\110\4\0\6\125\4\0\3\125\1\177\17\125"+
    "\13\0\1\125\5\0\5\125\1\0\5\125\1\110\4\0"+
    "\6\125\4\0\6\125\1\265\14\125\13\0\1\125\5\0"+
    "\5\125\1\0\5\125\1\110\4\0\6\125\4\0\7\125"+
    "\1\324\13\125\13\0\1\125\5\0\5\125\1\0\5\125"+
    "\1\110\4\0\6\125\4\0\3\125\1\265\17\125\16\0"+
    "\1\133\10\0\4\132\61\0\1\133\10\0\5\132\6\0"+
    "\1\132\10\0\5\132\77\0\1\325\73\0\1\177\74\0"+
    "\1\177\100\0\1\275\76\0\1\326\71\0\1\275\32\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\3\164\1\327\17\164\13\0\1\164\5\0\3\164\1\330"+
    "\1\164\1\234\5\164\5\0\6\164\4\0\23\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\7\164\1\331\13\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\14\164\1\332\6\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\16\164\1\333\4\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\5\164\1\334\15\164\13\0"+
    "\1\20\5\0\5\20\1\0\5\20\1\110\4\0\6\20"+
    "\4\0\11\20\1\247\11\20\4\0\3\177\2\0\37\177"+
    "\1\251\31\177\7\0\1\20\5\0\5\20\1\0\5\20"+
    "\1\110\4\0\6\20\4\0\17\20\1\335\3\20\26\0"+
    "\1\336\140\0\1\337\77\0\1\340\74\0\1\341\61\0"+
    "\1\342\43\0\1\343\132\0\1\344\27\0\1\125\5\0"+
    "\5\125\1\0\5\125\1\110\4\0\6\125\4\0\11\125"+
    "\1\266\11\125\13\0\1\125\5\0\5\125\1\0\5\125"+
    "\1\110\4\0\6\125\4\0\17\125\1\345\3\125\64\0"+
    "\1\276\103\0\1\346\16\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\16\164\1\347\4\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\20\164\1\350\2\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\17\164\1\351\3\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\3\164\1\352\17\164\13\0\1\164\5\0\3\164\1\353"+
    "\1\164\1\234\5\164\5\0\6\164\4\0\23\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\6\164\1\354\14\164\13\0\1\20\5\0\5\20\1\0"+
    "\5\20\1\110\4\0\6\20\4\0\2\20\1\247\20\20"+
    "\56\0\1\355\47\0\1\356\122\0\1\357\110\0\1\360"+
    "\66\0\1\361\100\0\1\362\24\0\1\125\5\0\5\125"+
    "\1\0\5\125\1\110\4\0\6\125\4\0\2\125\1\266"+
    "\20\125\55\0\1\276\33\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\3\164\1\363\17\164\13\0"+
    "\1\164\5\0\5\164\1\234\1\164\1\364\3\164\5\0"+
    "\6\164\4\0\23\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\2\164\1\365\20\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\15\164\1\366\5\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\6\164\1\367\14\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\11\164\1\370\11\164\24\0\1\371\77\0\1\372\125\0"+
    "\1\373\75\0\1\374\76\0\1\375\44\0\1\376\62\0"+
    "\1\164\5\0\3\164\1\377\1\164\1\234\5\164\5\0"+
    "\6\164\4\0\23\164\13\0\1\164\5\0\5\164\1\u0100"+
    "\5\164\5\0\6\164\4\0\23\164\13\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\3\164\1\u0101"+
    "\17\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\3\164\1\u0102\17\164\13\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\4\164\1\u0103"+
    "\16\164\13\0\1\164\5\0\5\164\1\u0104\5\164\5\0"+
    "\6\164\4\0\23\164\64\0\1\u0105\1\0\1\u0106\35\0"+
    "\1\u0107\136\0\1\u0108\32\0\1\u0109\64\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\11\164\1\u010a"+
    "\1\164\1\u010b\7\164\13\0\1\164\5\0\5\164\1\u010c"+
    "\5\164\5\0\6\164\4\0\23\164\13\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\14\164\1\u010d"+
    "\6\164\13\0\1\164\5\0\3\164\1\u010e\1\164\1\234"+
    "\5\164\5\0\6\164\4\0\23\164\65\0\1\u010f\77\0"+
    "\1\u0110\101\0\1\u0111\66\0\1\u0112\24\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\12\164\1\u0113"+
    "\10\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\14\164\1\u0114\6\164\13\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\20\164\1\u0115"+
    "\2\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\11\164\1\u0116\11\164\55\0\1\u0117\105\0"+
    "\1\u0118\66\0\1\u0119\104\0\1\u011a\23\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\2\164\1\u011b"+
    "\20\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\12\164\1\u011c\10\164\13\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\3\164\1\u011d"+
    "\17\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\12\164\1\u011e\10\164\56\0\1\u011f\105\0"+
    "\1\u0120\35\0\1\u0121\73\0\1\u0122\64\0\1\164\5\0"+
    "\5\164\1\234\5\164\5\0\6\164\4\0\3\164\1\u0123"+
    "\17\164\13\0\1\164\5\0\5\164\1\234\5\164\5\0"+
    "\6\164\4\0\13\164\1\u0124\7\164\13\0\1\164\5\0"+
    "\5\164\1\u0125\5\164\5\0\6\164\4\0\23\164\13\0"+
    "\1\164\5\0\3\164\1\u0126\1\164\1\234\5\164\5\0"+
    "\6\164\4\0\23\164\26\0\1\u0127\125\0\1\u0128\106\0"+
    "\1\u0129\21\0\1\164\5\0\5\164\1\u012a\5\164\5\0"+
    "\6\164\4\0\23\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\3\164\1\u012b\17\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\14\164\1\u012c\6\164\67\0\1\u012d\64\0\1\u012e\32\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\14\164\1\u012f\6\164\13\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\3\164\1\u0130\17\164\71\0"+
    "\1\u0131\63\0\1\u0132\31\0\1\164\5\0\5\164\1\234"+
    "\5\164\5\0\6\164\4\0\16\164\1\u0133\4\164\13\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\4\164\1\u0134\16\164\75\0\1\u0135\26\0\1\u0136\62\0"+
    "\1\164\5\0\5\164\1\234\5\164\5\0\6\164\4\0"+
    "\22\164\1\u0137\13\0\1\164\5\0\5\164\1\u0138\5\164"+
    "\5\0\6\164\4\0\23\164\26\0\1\u0139\62\0\1\164"+
    "\5\0\5\164\1\u013a\5\164\5\0\6\164\4\0\23\164"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15314];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\3\1\3\11\2\1\10\11\2\1\1\11"+
    "\4\1\1\11\3\1\1\11\5\1\1\11\1\1\6\11"+
    "\3\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\0\1\11\4\1\1\0"+
    "\1\1\13\0\1\1\1\11\3\1\1\0\2\1\4\0"+
    "\2\1\1\0\2\11\2\1\1\0\6\11\7\1\1\11"+
    "\6\1\15\0\1\1\1\0\2\1\5\0\1\11\1\1"+
    "\1\11\21\1\1\11\15\0\2\1\6\0\12\1\13\0"+
    "\7\1\1\11\10\0\6\1\6\0\6\1\1\0\1\11"+
    "\3\0\1\11\6\1\2\0\1\11\2\0\5\1\4\0"+
    "\4\1\4\0\4\1\2\0\1\11\1\0\4\1\1\11"+
    "\2\0\3\1\2\0\2\1\2\0\2\1\1\0\1\11"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private final Stack<Integer> stack = new Stack<>();

    private void pushState(int state) {
        stack.push(yystate());
        yybegin(state);
    }

    private void popState() {
        assert !stack.empty();
        yybegin(stack.pop());
    }

    private void resetState() {
        stack.clear();
        yybegin(YYINITIAL);
    }
    private int parenCount = 0;

    private void beginExpr() {
        parenCount = 0;
        pushState(WAITING_EXPR);
    }

    private void openParen() {
        parenCount++;
    }

    private void closeParen() {
        if (parenCount == 0) {
            popState();
        } else {
            parenCount--;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DtsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (yystate() != YYINITIAL) {
      resetState();
      yypushback(1);
    } else {
      return TokenType.BAD_CHARACTER;
    }
            }
          // fall through
          case 66: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 3:
            { return DtsTypes.STRING_LITERAL;
            }
          // fall through
          case 68: break;
          case 4:
            { return DtsTypes.NAME;
            }
          // fall through
          case 69: break;
          case 5:
            { pushState(WAITING_HANDLE); return DtsTypes.HANDLE;
            }
          // fall through
          case 70: break;
          case 6:
            { return DtsTypes.LPAREN;
            }
          // fall through
          case 71: break;
          case 7:
            { return DtsTypes.RPAREN;
            }
          // fall through
          case 72: break;
          case 8:
            { return DtsTypes.SLASH;
            }
          // fall through
          case 73: break;
          case 9:
            { return DtsTypes.SEMICOLON;
            }
          // fall through
          case 74: break;
          case 10:
            { pushState(WAITING_CELL); return DtsTypes.LANGL;
            }
          // fall through
          case 75: break;
          case 11:
            { pushState(WAITING_VALUE); return DtsTypes.ASSIGN;
            }
          // fall through
          case 76: break;
          case 12:
            { return DtsTypes.RANGL;
            }
          // fall through
          case 77: break;
          case 13:
            { pushState(WAITING_BYTE); return DtsTypes.LBRACKET;
            }
          // fall through
          case 78: break;
          case 14:
            { return DtsTypes.RBRACKET;
            }
          // fall through
          case 79: break;
          case 15:
            { return DtsTypes.LBRACE;
            }
          // fall through
          case 80: break;
          case 16:
            { return DtsTypes.RBRACE;
            }
          // fall through
          case 81: break;
          case 17:
            { return DtsTypes.CHAR_LITERAL;
            }
          // fall through
          case 82: break;
          case 18:
            { beginExpr(); return DtsTypes.LPAREN;
            }
          // fall through
          case 83: break;
          case 19:
            { return DtsTypes.INT_LITERAL;
            }
          // fall through
          case 84: break;
          case 20:
            { popState(); return DtsTypes.RANGL;
            }
          // fall through
          case 85: break;
          case 21:
            { popState(); return DtsTypes.RBRACKET;
            }
          // fall through
          case 86: break;
          case 22:
            { return DtsTypes.COMMA;
            }
          // fall through
          case 87: break;
          case 23:
            { popState(); return DtsTypes.INT_LITERAL;
            }
          // fall through
          case 88: break;
          case 24:
            { return DtsTypes.L_NOT;
            }
          // fall through
          case 89: break;
          case 25:
            { return DtsTypes.MOD;
            }
          // fall through
          case 90: break;
          case 26:
            { return DtsTypes.AND;
            }
          // fall through
          case 91: break;
          case 27:
            { openParen(); return DtsTypes.LPAREN;
            }
          // fall through
          case 92: break;
          case 28:
            { closeParen(); return DtsTypes.RPAREN;
            }
          // fall through
          case 93: break;
          case 29:
            { return DtsTypes.MUL;
            }
          // fall through
          case 94: break;
          case 30:
            { return DtsTypes.ADD;
            }
          // fall through
          case 95: break;
          case 31:
            { return DtsTypes.SUB;
            }
          // fall through
          case 96: break;
          case 32:
            { return DtsTypes.DIV;
            }
          // fall through
          case 97: break;
          case 33:
            { return DtsTypes.COLON;
            }
          // fall through
          case 98: break;
          case 34:
            { return DtsTypes.LES;
            }
          // fall through
          case 99: break;
          case 35:
            { return DtsTypes.GRT;
            }
          // fall through
          case 100: break;
          case 36:
            { return DtsTypes.TERNARY;
            }
          // fall through
          case 101: break;
          case 37:
            { return DtsTypes.XOR;
            }
          // fall through
          case 102: break;
          case 38:
            { return DtsTypes.OR;
            }
          // fall through
          case 103: break;
          case 39:
            { return DtsTypes.NOT;
            }
          // fall through
          case 104: break;
          case 40:
            { popState(); yypushback(1);
            }
          // fall through
          case 105: break;
          case 41:
            { return DtsTypes.PATH;
            }
          // fall through
          case 106: break;
          case 42:
            { popState(); return DtsTypes.NAME;
            }
          // fall through
          case 107: break;
          case 43:
            { popState(); return DtsTypes.RBRACE;
            }
          // fall through
          case 108: break;
          case 44:
            { return DtsTypes.INCLUDE_PATH;
            }
          // fall through
          case 109: break;
          case 45:
            { return DtsTypes.LABEL;
            }
          // fall through
          case 110: break;
          case 46:
            { return DtsTypes.COMMENT_EOL;
            }
          // fall through
          case 111: break;
          case 47:
            { return DtsTypes.BYTE_LITERAL;
            }
          // fall through
          case 112: break;
          case 48:
            { return DtsTypes.NEQ;
            }
          // fall through
          case 113: break;
          case 49:
            { return DtsTypes.L_AND;
            }
          // fall through
          case 114: break;
          case 50:
            { return DtsTypes.LSH;
            }
          // fall through
          case 115: break;
          case 51:
            { return DtsTypes.LEQ;
            }
          // fall through
          case 116: break;
          case 52:
            { return DtsTypes.EQ;
            }
          // fall through
          case 117: break;
          case 53:
            { return DtsTypes.GEQ;
            }
          // fall through
          case 118: break;
          case 54:
            { return DtsTypes.RSH;
            }
          // fall through
          case 119: break;
          case 55:
            { return DtsTypes.L_OR;
            }
          // fall through
          case 120: break;
          case 56:
            { return DtsTypes.PP_STATEMENT_MARKER;
            }
          // fall through
          case 121: break;
          case 57:
            { return DtsTypes.COMMENT_C;
            }
          // fall through
          case 122: break;
          case 58:
            { pushState(WAITING_BITS); return DtsTypes.BITS;
            }
          // fall through
          case 123: break;
          case 59:
            { resetState(); return DtsTypes.V1;
            }
          // fall through
          case 124: break;
          case 60:
            { resetState(); return DtsTypes.PLUGIN;
            }
          // fall through
          case 125: break;
          case 61:
            { pushState(WAITING_INCLUDE); return DtsTypes.INCLUDE;
            }
          // fall through
          case 126: break;
          case 62:
            { resetState(); pushState(WAITING_CELL); return DtsTypes.MEMRESERVE;
            }
          // fall through
          case 127: break;
          case 63:
            { resetState(); return DtsTypes.DELETE_NODE;
            }
          // fall through
          case 128: break;
          case 64:
            { resetState(); return DtsTypes.OMIT_NODE;
            }
          // fall through
          case 129: break;
          case 65:
            { resetState(); return DtsTypes.DELETE_PROP;
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
